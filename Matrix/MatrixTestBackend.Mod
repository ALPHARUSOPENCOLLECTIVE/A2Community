(**
	Compiler plugin for module testing
	#author# Patrick Hunziker
	#purpose# Module testing of {TEST} procedures immediately after successful compilation
*)

MODULE MatrixTestBackend;

IMPORT Basic := FoxBasic, SyntaxTree := FoxSyntaxTree, Formats := FoxFormats, Backend := FoxBackend, Options, Files, Strings, Commands;
		
TYPE
	TestBackend= OBJECT (Backend.Backend)
	VAR
		fileName : Files.FileName;
		testMode : ARRAY 64 OF CHAR;
		
		PROCEDURE ProcessSyntaxTreeModule*(module: SyntaxTree.Module): Formats.GeneratedModule;
		VAR procedure: SyntaxTree.Procedure; procedureName, moduleName, fullName: Basic.SectionName; file: Files.File; writer: Files.Writer;
				cmd, msg: ARRAY 256 OF CHAR; res:INTEGER;
		BEGIN	
			IF fileName#"" THEN 
				file := Files.Old(fileName);
				IF file#NIL THEN NEW(writer,file, file.Length()) END;
			END;
			Basic.GetString(module.name, moduleName);
			procedure:=module.moduleScope.firstProcedure;
			WHILE procedure#NIL DO
				IF procedure.isTest THEN 
					Basic.GetString(procedure.name, procedureName); 
					IF writer#NIL THEN (* for optional test file construction, from FoxTestBackend.Mod *)
						writer.String("positive: "); writer.String(moduleName); writer.String("."); writer.String(procedureName); writer.Ln;
						writer.Ln; 
						writer.String(\"\tMODULE Test42;\n"\);
						writer.String(\"\tIMPORT "\); writer.String(moduleName); writer.String(\";\n"\);
						writer.String(\"\tBEGIN "\); 
						writer.String(moduleName); writer.String("."); writer.String(procedureName);
						writer.String(" END Test42."); writer.Ln;
						writer.Ln; 
						writer.Update; 
					END;
					IF (testMode="Immediate") THEN
						COPY("System.FreeDownTo ", cmd); Strings.Append(cmd, moduleName); Commands.Call(cmd, {Commands.Wait},res,msg); 
						COPY(moduleName, fullName); Strings.Append(fullName, "."); Strings.Append(fullName, procedureName);
						IF log#NIL THEN log.String("testing "); log.String(fullName); log.String(": "); log.Update; END;
						Commands.Activate(fullName,NIL,{Commands.Wait},res,msg);
						IF log#NIL THEN 
							log.String(msg); IF res=0 THEN log.String(" successful.") ELSE log.Int(res,6);  END;
							log.Ln; log.Update; 
						END;
					END;
				END;
				procedure:=procedure.nextProcedure;
			END;
			RETURN NIL;
		END ProcessSyntaxTreeModule;

		PROCEDURE DefineOptions*(options: Options.Options);
		BEGIN
			DefineOptions^(options);
			options.Add(0X,"testFile",Options.String);	
			options.Add(0X,"testMode",Options.String);	
		END DefineOptions;

		PROCEDURE GetOptions*(options: Options.Options);
		CONST ForceNew=TRUE;
		VAR file: Files.File; writer: Files.Writer; fullName: Files.FileName; flags:SET;
		BEGIN
			GetOptions^(options);
			
			IGNORE options.GetString("testMode", testMode);
			
			IF options.GetString("testFile", fileName) THEN 
				fileName := "Execution.Test";
				IF ForceNew OR ~Files.Exists(fileName, fullName, flags) THEN 
					file := Files.New(fileName);
					NEW(writer,file,0);
					writer.String("# Testfile -- automatically generated by FoxTestBackend"); writer.Ln;
					writer.String(\"# options --mayTrap --prolog="Compiler.Compile TesterInput.txt" --command="System.Free Test42;System.Load Test42" --logFile="ExecutionTest.Log" --result="Execution.Test.Diff" \n\n"\);
					writer.Update();
					Files.Register(file);
				END;
			END;
		END GetOptions;
	END TestBackend;

	PROCEDURE Get*(): Backend.Backend;
	VAR documentationBackend: TestBackend;
	BEGIN
		NEW(documentationBackend); RETURN documentationBackend;
	END Get;

END MatrixTestBackend.


System.FreeDownTo MatrixTestBackend ~ 